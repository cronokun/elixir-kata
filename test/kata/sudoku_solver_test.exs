defmodule Kata.SudokuSolverTest do
  @moduledoc false

  use ExUnit.Case

  import Kata.SudokuSolver, only: [solve: 1, verify: 1]

  describe ".solve/1" do
    test "solves easy puzzle" do
      puzzle = [
        [0, 2, 7, 0, 5, 0, 0, 1, 3],
        [9, 1, 5, 0, 0, 0, 6, 0, 7],
        [0, 8, 3, 0, 1, 0, 0, 0, 0],
        [0, 6, 0, 1, 2, 9, 0, 3, 0],
        [0, 3, 2, 8, 0, 5, 4, 7, 0],
        [5, 0, 8, 3, 0, 4, 0, 0, 0],
        [0, 0, 1, 2, 0, 0, 0, 0, 5],
        [0, 0, 0, 0, 8, 1, 0, 2, 6],
        [0, 0, 0, 7, 4, 0, 8, 0, 0]
      ]

      expected = [
        [4, 2, 7, 6, 5, 8, 9, 1, 3],
        [9, 1, 5, 4, 3, 2, 6, 8, 7],
        [6, 8, 3, 9, 1, 7, 2, 5, 4],
        [7, 6, 4, 1, 2, 9, 5, 3, 8],
        [1, 3, 2, 8, 6, 5, 4, 7, 9],
        [5, 9, 8, 3, 7, 4, 1, 6, 2],
        [8, 7, 1, 2, 9, 6, 3, 4, 5],
        [3, 4, 9, 5, 8, 1, 7, 2, 6],
        [2, 5, 6, 7, 4, 3, 8, 9, 1]
      ]

      assert {:ok, ^expected} = solve(puzzle)
    end

    test "solves hard puzzle" do
      puzzle = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
      ]

      expected = [
        [5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 9, 8, 3, 4, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9]
      ]

      assert {:ok, ^expected} = solve(puzzle)
    end

    @tag :skip
    test("solves ambiguous puzzle") do
      puzzle = [
        [0, 4, 5, 0, 2, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 3, 0, 0],
        [2, 1, 0, 0, 0, 0, 0, 8, 0],
        [0, 7, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 6, 9, 3],
        [0, 0, 1, 9, 0, 6, 0, 0, 0],
        [6, 0, 0, 0, 0, 0, 0, 0, 0],
        [9, 0, 0, 3, 0, 0, 0, 0, 8]
      ]

      # FIXME
      expected = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
      ]

      assert {:ok, ^expected} = solve(puzzle)
    end
  end

  describe ".verify/1" do
    test "returns `:ok` when puzzle solved correctly" do
      puzzle1 = [
        [5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 9, 8, 3, 4, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 9, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 1, 7, 9]
      ]

      assert verify(puzzle1) == :ok

      puzzle2 = [
        [4, 2, 7, 6, 5, 8, 9, 1, 3],
        [9, 1, 5, 4, 3, 2, 6, 8, 7],
        [6, 8, 3, 9, 1, 7, 2, 5, 4],
        [7, 6, 4, 1, 2, 9, 5, 3, 8],
        [1, 3, 2, 8, 6, 5, 4, 7, 9],
        [5, 9, 8, 3, 7, 4, 1, 6, 2],
        [8, 7, 1, 2, 9, 6, 3, 4, 5],
        [3, 4, 9, 5, 8, 1, 7, 2, 6],
        [2, 5, 6, 7, 4, 3, 8, 9, 1]
      ]

      assert verify(puzzle2) == :ok
    end

    test "returns `:error` when puzzle have duplicate numbers" do
      # failed by rows
      puzzle1 = [
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [9, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [1, 2, 3, 4, 5, 6, 7, 8, 9]
      ]

      assert verify(puzzle1) == :error

      # failed by columns
      puzzle2 = [
        [9, 2, 3, 4, 5, 6, 7, 8, 1],
        [2, 3, 4, 5, 6, 7, 8, 9, 1],
        [3, 4, 5, 6, 7, 8, 9, 1, 2],
        [4, 5, 6, 7, 8, 9, 1, 2, 3],
        [5, 6, 7, 8, 9, 1, 2, 3, 4],
        [6, 7, 8, 9, 1, 2, 3, 4, 5],
        [7, 8, 9, 1, 2, 3, 4, 5, 6],
        [8, 9, 1, 2, 3, 4, 5, 6, 7],
        [9, 1, 2, 3, 4, 5, 6, 7, 8]
      ]

      assert verify(puzzle2) == :error

      # failed by blocks
      puzzle3 = [
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [2, 3, 4, 5, 6, 7, 8, 9, 1],
        [3, 4, 5, 6, 7, 8, 9, 1, 2],
        [4, 5, 6, 7, 8, 9, 1, 2, 3],
        [5, 6, 7, 8, 9, 1, 2, 3, 4],
        [6, 7, 8, 9, 1, 2, 3, 4, 5],
        [7, 8, 9, 1, 2, 3, 4, 5, 6],
        [8, 9, 1, 2, 3, 4, 5, 6, 7],
        [9, 1, 2, 3, 4, 5, 6, 7, 8]
      ]

      assert verify(puzzle3) == :error
    end

    test "returns `:error` when puzzle have not filled tiles" do
      puzzle = [
        [5, 3, 4, 6, 7, 8, 9, 1, 2],
        [6, 7, 2, 1, 9, 5, 3, 4, 8],
        [1, 9, 8, 3, 0, 2, 5, 6, 7],
        [8, 5, 9, 7, 6, 1, 4, 2, 3],
        [4, 2, 6, 8, 5, 3, 7, 9, 1],
        [7, 1, 3, 0, 2, 4, 8, 5, 6],
        [9, 6, 1, 5, 3, 7, 2, 8, 4],
        [2, 8, 7, 4, 1, 9, 6, 3, 5],
        [3, 4, 5, 2, 8, 6, 0, 7, 9]
      ]

      assert verify(puzzle) == :error
    end
  end
end
